{"version":3,"sources":["api/axios.js","utils/constants.js","reducer/mail.js","reducer/index.js","context/ColorContext.js","component/MailBox/Section/MailBar.js","component/MailBox/Section/MailItem.js","component/MailBox/Section/MailList.js","component/MailBox/Section/MailView.js","component/MailBox/MailBox.js","component/Switch/Switch.js","App.js","index.js"],"names":["getList","a","axios","get","process","response","data","THEME","STATUS","sagaGetItems","watchItems","SET_SECTION","SET_READ","SET_DELETE","GET_ITMES","setSection","createAction","section","setRead","id","setDelete","getItems","type","SUCCESS","FAILURE","call","payload","put","failure","takeEvery","initialState","selectedId","items","loading","produceImmer","enableES5","produce","mail","handleActions","state","draft","findIndex","item","index","read","nextIndex","action","rootSaga","all","rootReducer","combineReducers","theme","reducer","localStorage","setItem","ThemeContext","createContext","ThemeProvider","props","useReducer","dispatch","Provider","value","children","MailBar","onSectionChange","notReadMailCount","filter","length","notReadTrashCount","className","onClick","classNames","active","MailItem","title","from","time","useDispatch","useSelector","useContext","selectedItemRef","useRef","useEffect","current","scrollIntoView","behavior","block","selected","theme_light","theme_dark","ref","split","MailList","map","MailView","selectedItem","onGotoTrash","msg","MailBox","ItemById","Switch","btn_light","App","getItem","window","matchMedia","matches","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98ed245f.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const getList = async () => {\r\n  //if (process.env.NODE_ENV === \"development\") {\r\n  const response = await axios.get(`${process.env.REACT_APP_API_URL}/mails`);\r\n  return response.data;\r\n  //} else {\r\n  // const response = await axios.get(\r\n  //   `https://raw.githubusercontent.com/daeun-react/mailbox/main/server/data.json`\r\n  // );\r\n  // return response.data.mails;\r\n  //}\r\n};\r\n\r\nexport const getListById = async (id) => {\r\n  const response = await axios.get(`${process.env.REACT_APP_API_URL}/mails/${id}`);\r\n  return response.data;\r\n};\r\n","export const THEME = {\r\n  LIGHT_MODE: \"LIGHT\",\r\n  DARK_MODE: \"DARK\",\r\n};\r\n\r\nexport const STATUS = {\r\n  MAIL: \"inbox\",\r\n  TRASH: \"trash\",\r\n};\r\n","import { enableES5, produce } from \"immer\";\r\nimport { createAction, handleActions } from \"redux-actions\";\r\nimport { call, put, takeEvery } from \"@redux-saga/core/effects\";\r\nimport { getList } from \"api/axios\";\r\nimport { STATUS } from \"utils/constants\";\r\n\r\n/**\r\n * Action Type\r\n */\r\nconst SET_SECTION = \"mail/SET_SECTION\";\r\nconst SET_READ = \"mail/SET_READ\";\r\nconst SET_DELETE = \"mail/SET_DELETE\";\r\n\r\nconst GET_ITMES = \"mail/GET_ITEMS\";\r\nconst GET_ITEMS_SUCCESS = \"mail/GET_ITEMS_SUCCESS\";\r\nconst GET_ITEMS_FAILURE = \"mail/GET_ITEMS_FAILURE\";\r\n/**\r\n * Action Creator Function\r\n */\r\nexport const setSection = createAction(SET_SECTION, (section) => section);\r\nexport const setRead = createAction(SET_READ, (id) => id);\r\nexport const setDelete = createAction(SET_DELETE, (id) => id);\r\n\r\nexport const getItems = createAction(GET_ITMES);\r\n\r\nfunction* sagaGetItems(type) {\r\n  const [SUCCESS, FAILURE] = [`${type}_SUCCESS`, `${type}_FAILURE`];\r\n  try {\r\n    const payload = yield call(getList);\r\n    yield put({ type: SUCCESS, payload });\r\n  } catch (error) {\r\n    yield put({ type: FAILURE, failure: true, payload: error });\r\n  }\r\n}\r\n\r\nexport function* watchItems() {\r\n  yield takeEvery(GET_ITMES, () => sagaGetItems(GET_ITMES));\r\n}\r\n\r\n/**\r\n * initial State\r\n */\r\nconst initialState = {\r\n  selectedId: 1,\r\n  section: STATUS.MAIL,\r\n  items: {\r\n    loading: false,\r\n    data: [],\r\n    failure: null,\r\n  },\r\n};\r\n\r\nconst produceImmer = (...args) => {\r\n  enableES5();\r\n  return produce(...args);\r\n};\r\n\r\n/**\r\n * Reducer\r\n */\r\n\r\nconst mail = handleActions(\r\n  {\r\n    [SET_SECTION]: (state, { payload: section }) =>\r\n      produceImmer(state, (draft) => {\r\n        draft.section = section;\r\n        draft.selectedId = draft.items.data.findIndex((item) => item.section === section) + 1;\r\n      }),\r\n\r\n    [SET_READ]: (state, { payload: id }) =>\r\n      produceImmer(state, (draft) => {\r\n        const index = draft.items.data.findIndex((item) => item.id === id);\r\n        draft.items.data[index].read = true;\r\n        draft.selectedId = id;\r\n      }),\r\n\r\n    [SET_DELETE]: (state, { payload: id }) =>\r\n      produceImmer(state, (draft) => {\r\n        // trash 로 변경\r\n        const index = draft.items.data.findIndex((item) => item.id === id);\r\n        draft.items.data[index].section = STATUS.TRASH;\r\n\r\n        // selectedId 변경\r\n        const nextIndex = state.items.data.findIndex(\r\n          (item) => item.section === STATUS.MAIL && item.id !== id\r\n        );\r\n\r\n        if (nextIndex > -1) {\r\n          draft.items.data[nextIndex].read = true;\r\n          draft.selectedId = draft.items.data[nextIndex].id;\r\n        } else {\r\n          draft.items.data[0].read = true;\r\n          draft.selectedId = 1;\r\n        }\r\n      }),\r\n\r\n    [GET_ITMES]: (state, action) =>\r\n      produceImmer(state, (draft) => {\r\n        draft.items = { loading: true, data: null, failure: null };\r\n      }),\r\n    [GET_ITEMS_SUCCESS]: (state, { payload }) =>\r\n      produceImmer(state, (draft) => {\r\n        draft.items = { loading: false, data: payload, failure: null };\r\n      }),\r\n    [GET_ITEMS_FAILURE]: (state, { payload }) =>\r\n      produceImmer(state, (draft) => {\r\n        draft.items = { loading: false, data: null, failure: payload };\r\n      }),\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default mail;\r\n","import { combineReducers } from \"redux\";\r\nimport { all } from \"redux-saga/effects\";\r\nimport mail, { watchItems } from \"reducer/mail\";\r\n\r\nconst rootReducer = combineReducers({ mail });\r\n\r\nexport function* rootSaga() {\r\n  yield all([watchItems()]);\r\n}\r\n\r\nexport default rootReducer;\r\n","import { createContext, useReducer } from \"react\";\r\nimport { THEME } from \"utils/constants\";\r\n\r\nconst initialState = {\r\n  theme: THEME.LIGHT_MODE,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case THEME.DARK_MODE:\r\n      localStorage.setItem(\"theme\", THEME.DARK_MODE);\r\n      return { theme: THEME.DARK_MODE };\r\n    case THEME.LIGHT_MODE:\r\n      localStorage.setItem(\"theme\", THEME.LIGHT_MODE);\r\n      return { theme: THEME.LIGHT_MODE };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nexport const ThemeProvider = (props) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  return (\r\n    <ThemeContext.Provider value={{ state, dispatch }}>{props.children}</ThemeContext.Provider>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { FiMail, FiTrash2 } from \"react-icons/fi\";\r\nimport { STATUS } from \"utils/constants\";\r\n\r\nfunction MailBar({ data, section, onSectionChange }) {\r\n  const notReadMailCount = data.filter(\r\n    (item) => item.section === STATUS.MAIL && item.read === \"false\"\r\n  ).length;\r\n\r\n  const notReadTrashCount = data.filter((item) => item.section === STATUS.TRASH).length;\r\n\r\n  return (\r\n    <aside className=\"sidebar\">\r\n      <ul className=\"sidebar_container\">\r\n        <li onClick={() => onSectionChange(STATUS.MAIL)}>\r\n          <button type=\"button\" className={classNames({ active: section === STATUS.MAIL })}>\r\n            <span>\r\n              <FiMail />\r\n              <span> 받은 메일함 </span>\r\n            </span>\r\n            <span className=\"count\">{notReadMailCount}</span>\r\n          </button>\r\n        </li>\r\n\r\n        <li onClick={() => onSectionChange(STATUS.TRASH)}>\r\n          <button type=\"button\" className={classNames({ active: section === STATUS.TRASH })}>\r\n            <span>\r\n              <FiTrash2 />\r\n              <span> 지운 메일함 </span>\r\n            </span>\r\n            <span className=\"count\">{notReadTrashCount}</span>\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </aside>\r\n  );\r\n}\r\n\r\nexport default MailBar;\r\n","import React, { useContext, useEffect, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setRead } from \"reducer/mail\";\r\nimport classNames from \"classnames\";\r\nimport { ThemeContext } from \"context/ColorContext\";\r\nimport { THEME } from \"utils/constants\";\r\n\r\nfunction MailItem({ id, read, title, from, time }) {\r\n  const dispatch = useDispatch();\r\n  const { selectedId } = useSelector((state) => state.mail);\r\n  const { state } = useContext(ThemeContext);\r\n\r\n  const selectedItemRef = useRef(null);\r\n\r\n  const scrollToSelected = () =>\r\n    selectedItemRef.current.scrollIntoView({\r\n      behavior: \"smooth\",\r\n      block: \"center\",\r\n    });\r\n  useEffect(() => {\r\n    if (id === selectedId) {\r\n      scrollToSelected();\r\n    }\r\n  }, [id, selectedId]);\r\n\r\n  return (\r\n    <div\r\n      className={classNames(\r\n        \"mail_items\",\r\n        { selected: id === selectedId },\r\n        { theme_light: state.theme === THEME.LIGHT_MODE },\r\n        { theme_dark: state.theme === THEME.DARK_MODE }\r\n      )}\r\n      onClick={() => {\r\n        dispatch(setRead(id));\r\n      }}\r\n      ref={selectedItemRef}>\r\n      <div className=\"mail_items_trunc\" data-read={read}></div>\r\n      <div className=\"mail_items_title trunc\">{title}</div>\r\n      <div className=\"mail_items_sub\">\r\n        <span className=\"mail_items_from trunc\">{from}</span>\r\n        <span className=\"mail_items_time trunc\">{time.split(\" \")[0]}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MailItem;\r\n","import classNames from \"classnames\";\r\nimport React, { useContext } from \"react\";\r\nimport { ThemeContext } from \"context/ColorContext\";\r\nimport { MailItem } from \"component/MailBox/Section\";\r\nimport { THEME } from \"utils/constants\";\r\n\r\nfunction MailList({ data, section }) {\r\n  const { state } = useContext(ThemeContext);\r\n\r\n  return (\r\n    <div\r\n      className={classNames(\"mail_list\", {\r\n        theme_dark: state.theme === THEME.DARK_MODE,\r\n      })}>\r\n      {data\r\n        .filter((item) => item.section === section)\r\n        .map((mail) => (\r\n          <MailItem key={mail.id} {...mail} />\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MailList;\r\n","import React, { useContext } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { FiTrash2 } from \"react-icons/fi\";\r\nimport { ThemeContext } from \"context/ColorContext\";\r\nimport { STATUS, THEME } from \"utils/constants\";\r\n\r\nfunction MailView({ selectedItem, onGotoTrash }) {\r\n  const { id, title, from, time, msg, section } = selectedItem;\r\n  const { state } = useContext(ThemeContext);\r\n\r\n  return (\r\n    <div\r\n      className={classNames(\r\n        \"mail_view\",\r\n        { theme_light: state.theme === THEME.LIGHT_MODE },\r\n        { theme_dark: state.theme === THEME.DARK_MODE }\r\n      )}>\r\n      <div className={`mail_view_header`}>\r\n        <h3 className=\"mail_view_title\">{title}</h3>\r\n        {section !== STATUS.TRASH && (\r\n          <FiTrash2 className=\"btn_delete\" onClick={() => onGotoTrash(id)} />\r\n        )}\r\n        <div className=\"mail_sub\">\r\n          <div className=\"mail_view_from\">{from}</div>\r\n          <div className=\"mail_view_time\">{time}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"mail_view_msg\">{msg}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MailView;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getItems, setDelete, setSection } from \"reducer/mail\";\r\nimport { MailBar, MailList, MailView } from \"component/MailBox/Section\";\r\nimport \"component/MailBox/MailBox.scss\";\r\n\r\nfunction MailBox() {\r\n  const { selectedId, section, items } = useSelector((state) => state.mail);\r\n  const dispatch = useDispatch();\r\n  const onSectionChange = (section) => dispatch(setSection(section));\r\n  const onGotoTrash = (id) => dispatch(setDelete(id));\r\n\r\n  useEffect(() => {\r\n    dispatch(getItems());\r\n  }, [dispatch]);\r\n\r\n  if (!items.data) return null;\r\n  if (items.loading) return <div className=\"loading\">loading...</div>;\r\n  if (items.failure) return <div>error</div>;\r\n\r\n  const ItemById = items.data.filter((item) => item.id === selectedId);\r\n\r\n  return (\r\n    <>\r\n      <MailBar data={items.data} section={section} onSectionChange={onSectionChange} />\r\n      <div className=\"mail_container\">\r\n        <MailList data={items.data} section={section} />\r\n        {ItemById.length === 0 ? (\r\n          <div className=\"mail_view\">메일이 없습니다.</div>\r\n        ) : (\r\n          <MailView selectedItem={ItemById[0]} onGotoTrash={onGotoTrash} />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MailBox;\r\n","import React, { useContext } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { ThemeContext } from \"context/ColorContext\";\r\nimport { THEME } from \"utils/constants\";\r\nimport \"component/Switch/Switch.scss\";\r\n\r\nfunction Switch() {\r\n  const { state, dispatch } = useContext(ThemeContext);\r\n\r\n  const changeMode = () => {\r\n    state.theme === THEME.LIGHT_MODE\r\n      ? dispatch({ type: THEME.DARK_MODE })\r\n      : dispatch({ type: THEME.LIGHT_MODE });\r\n  };\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className={classNames(\"btn_darkmode\", {\r\n        btn_light: state.theme === THEME.LIGHT_MODE,\r\n      })}\r\n      onClick={changeMode}>\r\n      BUTTON\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Switch;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { ThemeContext } from \"context/ColorContext\";\r\nimport MailBox from \"component/MailBox/MailBox\";\r\nimport Switch from \"component/Switch/Switch\";\r\nimport { THEME } from \"utils/constants\";\r\nimport \"App.scss\";\r\n\r\nfunction App() {\r\n  const { dispatch } = useContext(ThemeContext);\r\n\r\n  useEffect(() => {\r\n    let theme = localStorage.getItem(\"theme\");\r\n\r\n    // 사용자 OS 테마적용\r\n    if (!theme) {\r\n      const { matches } = window.matchMedia(\"(prefers-color-scheme: dark)\");\r\n      theme = matches ? THEME.DARK_MODE : THEME.LIGHT_MODE;\r\n      localStorage.setItem(\"theme\", theme);\r\n    }\r\n    theme === THEME.DARK_MODE && dispatch({ type: THEME.DARK_MODE });\r\n    theme === THEME.LIGHT_MODE && dispatch({ type: THEME.LIGHT_MODE });\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <Switch />\r\n      <div className=\"mail_wrapper\">\r\n        <MailBox />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import \"react-app-polyfill/ie11\";\r\nimport \"react-app-polyfill/stable\";\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport rootReducer, { rootSaga } from \"reducer\";\r\nimport { ThemeProvider } from \"context/ColorContext\";\r\nimport App from \"App\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}